{"version":3,"sources":["routes/extensions/map/googlemap/geoLocation/Components/GeoLocation.js","routes/extensions/map/googlemap/geoLocation/index.js"],"names":["geolocation","canUseDOM","navigator","getCurrentPosition","success","failure","GeolocationExampleGoogleMap","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","center","position","content","radius","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","GeolocationExample","state","isUnmounted","_this2","this","tick","setState","Math","max","raf","lat","coords","latitude","lng","longitude","reason","concat","loadingElement","style","height","containerElement","mapElement","Component","GeoLocation","card","className","title","IntlMessages","id","GeoLocation_GeolocationExample"],"mappings":"wNAKMA,EACJC,KAAaC,UAAUF,YACrBE,UAAUF,YACT,CACCG,mBADD,SACoBC,EAASC,GAC1BA,EAAO,+CAKTC,EAA8BC,wBAAc,SAAAC,GAAK,OACrDC,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACEC,YAAa,GACbC,OAAQN,EAAMM,QAEbN,EAAMM,QACLL,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYG,SAAUP,EAAMM,QAC1BL,EAAAC,EAAAC,cAAA,WAAMH,EAAMQ,UAGfR,EAAMM,QACLL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEE,OAAQN,EAAMM,OACdG,OAAQT,EAAMS,OACdC,QAAS,CACPC,UAAW,MACXC,YAAa,GACbC,YAAa,MACbC,cAAe,EACfC,aAAc,QAYHC,6MAEnBC,MAAQ,CACNX,OAAQ,KACRE,QAAS,KACTC,OAAQ,OAGVS,aAAc,qFAEM,IAAAC,EAAAC,KACZC,EAAO,SAAPA,IACAF,EAAKD,cAGTC,EAAKG,SAAS,CAACb,OAAQc,KAAKC,IAAIL,EAAKF,MAAMR,OAAS,GAAI,KAEpDU,EAAKF,MAAMR,OAAS,KACtBgB,IAAIJ,KAGR7B,EAAYG,mBAAmB,SAACY,GAC1BY,EAAKD,cAGTC,EAAKG,SAAS,CACZhB,OAAQ,CACNoB,IAAKnB,EAASoB,OAAOC,SACrBC,IAAKtB,EAASoB,OAAOG,WAEvBtB,QAAO,gCAGTiB,IAAIJ,KACH,SAACU,GACEZ,EAAKD,aAGTC,EAAKG,SAAS,CACZhB,OAAQ,CACNoB,IAAK,GACLG,IAAK,KAEPrB,QAAO,0CAAAwB,OAA4CD,EAA5C,yDAMXX,KAAKF,aAAc,mCAInB,OACEjB,EAAAC,EAAAC,cAACL,EAAD,CACEmC,eAAgBhC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,OAAM,UACnCC,iBAAkBnC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,OAAM,WACrCE,WAAYpC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,OAAM,UAC/B7B,OAAQc,KAAKH,MAAMX,OACnBE,QAASY,KAAKH,MAAMT,QACpBC,OAAQW,KAAKH,MAAMR,gBA5DqB6B,oBC/BjCC,UARK,WAClB,OACEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,UAAU,UAAUC,MAAOzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAcC,GAAG,6BAChD3C,EAAAC,EAAAC,cAAC0C,EAAD","file":"static/js/161.8c87bba9.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from \"react-google-maps\";\nimport canUseDOM from \"can-use-dom\";\nimport raf from \"raf\";\n\nconst geolocation = (\n  canUseDOM && navigator.geolocation ?\n    navigator.geolocation :\n    ({\n      getCurrentPosition(success, failure) {\n        failure(`Your browser doesn't support geolocation.`);\n      },\n    })\n);\n\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap\n    defaultZoom={10}\n    center={props.center}\n  >\n    {props.center && (\n      <InfoWindow position={props.center}>\n        <div>{props.content}</div>\n      </InfoWindow>\n    )}\n    {props.center && (\n      <Circle\n        center={props.center}\n        radius={props.radius}\n        options={{\n          fillColor: 'red',\n          fillOpacity: 0.20,\n          strokeColor: 'red',\n          strokeOpacity: 1,\n          strokeWeight: 1,\n        }}\n      />\n    )}\n  </GoogleMap>\n));\n\n/*\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\n *\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\n */\nexport default class GeolocationExample extends Component {\n\n  state = {\n    center: null,\n    content: null,\n    radius: 6000,\n  };\n\n  isUnmounted = false;\n\n  componentDidMount() {\n    const tick = () => {\n      if (this.isUnmounted) {\n        return;\n      }\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\n\n      if (this.state.radius > 200) {\n        raf(tick);\n      }\n    };\n    geolocation.getCurrentPosition((position) => {\n      if (this.isUnmounted) {\n        return;\n      }\n      this.setState({\n        center: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        },\n        content: `Location found using HTML5.`,\n      });\n\n      raf(tick);\n    }, (reason) => {\n      if (this.isUnmounted) {\n        return;\n      }\n      this.setState({\n        center: {\n          lat: 60,\n          lng: 105,\n        },\n        content: `Error: The Geolocation service failed (${reason}).`,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isUnmounted = true;\n  }\n\n  render() {\n    return (\n      <GeolocationExampleGoogleMap\n        loadingElement={<div style={{height: `100%`}}/>}\n        containerElement={<div style={{height: `550px`}}/>}\n        mapElement={<div style={{height: `100%`}}/>}\n        center={this.state.center}\n        content={this.state.content}\n        radius={this.state.radius}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport {Card} from \"antd\";\n\nimport GeolocationExample from \"./Components/GeoLocation\";\nimport IntlMessages from \"util/IntlMessages\";\n\n\nconst GeoLocation = () => {\n  return (\n    <Card className=\"gx-card\" title={<IntlMessages id=\"sidebar.map.geoLocation\"/>}>\n      <GeolocationExample/>\n    </Card>\n  );\n};\n\nexport default GeoLocation;\n"],"sourceRoot":""}