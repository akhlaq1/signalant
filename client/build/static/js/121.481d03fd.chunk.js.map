{"version":3,"sources":["routes/components/billing/Invoices/ResetFilter.js","routes/components/billing/Invoices/index.js"],"names":["data","key","tname","package","invoice","ResetFilter","state","filteredInfo","sortedInfo","handleChange","pagination","filters","sorter","console","log","_this","setState","clearFilters","clearAll","setAgeSort","order","columnKey","_this$state","this","columns","title","dataIndex","filteredValue","onFilter","value","record","includes","a","b","length","sortOrder","react_default","createElement","card","table","className","dataSource","onChange","React","Component","DataTable","row","col","span","Invoices_ResetFilter"],"mappings":"sMAGMA,EAAO,CAAC,CACZC,IAAK,IACLC,MAAO,aACPC,QAAS,UACTC,QAAS,MACR,CACDH,IAAK,IACLC,MAAO,YACPC,QAAS,UACTC,QAAS,MACR,CACDH,IAAK,IACLC,MAAO,YACPC,QAAS,OACTC,QAAS,OAgFIC,6MA5EbC,MAAQ,CACNC,aAAc,KACdC,WAAY,QAGdC,aAAe,SAACC,EAAYC,EAASC,GACnCC,QAAQC,IAAI,qBAAsBJ,EAAYC,EAASC,GACvDG,EAAKC,SAAS,CACZT,aAAcI,EACdH,WAAYI,OAIhBK,aAAe,WACbF,EAAKC,SAAS,CAACT,aAAc,UAG/BW,SAAW,WACTH,EAAKC,SAAS,CACZT,aAAc,KACdC,WAAY,UAIhBW,WAAa,WACXJ,EAAKC,SAAS,CACZR,WAAY,CACVY,MAAO,UACPC,UAAW,oFAKT,IAAAC,EAC2BC,KAAKjB,MAAjCE,EADCc,EACDd,WAAYD,EADXe,EACWf,aACjBC,EAAaA,GAAc,GAE3B,IAAMgB,EAAU,CAAC,CACbC,MAAO,SACPC,UAAW,MACXzB,IAAK,MACL0B,eALJpB,EAAeA,GAAgB,IAKCN,KAAO,KACnC2B,SAAU,SAACC,EAAOC,GAAR,OAAmBA,EAAO7B,IAAI8B,SAASF,IACjDjB,OAAQ,SAACoB,EAAGC,GAAJ,OAAUD,EAAE/B,IAAIiC,OAASD,EAAEhC,IAAIiC,QACvCC,UAAoC,QAAzB3B,EAAWa,WAAuBb,EAAWY,OACvD,CACDK,MAAO,cACPC,UAAW,QACXzB,IAAK,QACLW,OAAQ,SAACoB,EAAGC,GAAJ,OAAUD,EAAE9B,MAAQ+B,EAAE/B,OAC9BiC,UAAoC,UAAzB3B,EAAWa,WAAyBb,EAAWY,OACzD,CACDK,MAAO,eACPC,UAAW,UACXzB,IAAK,UACL0B,cAAepB,EAAaJ,SAAW,KACvCyB,SAAU,SAACC,EAAOC,GAAR,OAAmBA,EAAO3B,QAAQ4B,SAASF,IACrDjB,OAAQ,SAACoB,EAAGC,GAAJ,OAAUD,EAAE7B,QAAQ+B,OAASD,EAAE9B,QAAQ+B,QAC/CC,UAAoC,YAAzB3B,EAAWa,WAA2Bb,EAAWY,OAC3D,CACDK,MAAO,aACPC,UAAW,UACXzB,IAAK,UACLW,OAAQ,SAACoB,EAAGC,GAAJ,OAAUD,EAAE5B,QAAU6B,EAAE7B,SAChC+B,UAAoC,YAAzB3B,EAAWa,WAA2Bb,EAAWY,QAIhE,OACEgB,EAAAJ,EAAAK,cAACC,EAAA,EAAD,CAAMb,MAAM,WACVW,EAAAJ,EAAAK,cAACE,EAAA,EAAD,CAAOC,UAAU,sBAAsBhB,QAASA,EAASiB,WAAYzC,EAAM0C,SAAUnB,KAAKd,uBAvExEkC,IAAMC,WCNjBC,UAVG,WAChB,OACET,EAAAJ,EAAAK,cAACS,EAAA,EAAD,KACEV,EAAAJ,EAAAK,cAACU,EAAA,EAAD,CAAKC,KAAM,IACTZ,EAAAJ,EAAAK,cAACY,EAAD","file":"static/js/121.481d03fd.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, Table, Button} from \"antd\";\n\nconst data = [{\n  key: '1',\n  tname: 'John Brown',\n  package: 'PREMIUM',\n  invoice: 1001,\n}, {\n  key: '2',\n  tname: 'Jim Green',\n  package: 'PREMIUM',\n  invoice: 1002,\n}, {\n  key: '3',\n  tname: 'Joe Black',\n  package: 'FREE',\n  invoice: 1003,\n}];\n\nclass ResetFilter extends React.Component{\n  state = {\n    filteredInfo: null,\n    sortedInfo: null,\n  };\n\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    });\n  };\n\n  clearFilters = () => {\n    this.setState({filteredInfo: null});\n  };\n\n  clearAll = () => {\n    this.setState({\n      filteredInfo: null,\n      sortedInfo: null,\n    });\n  };\n\n  setAgeSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'tname',\n      },\n    });\n  };\n\n  render(){\n    let {sortedInfo, filteredInfo} = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n        title: 'Key ID',\n        dataIndex: 'key',\n        key: 'key',\n        filteredValue: filteredInfo.key || null,\n        onFilter: (value, record) => record.key.includes(value),\n        sorter: (a, b) => a.key.length - b.key.length,\n        sortOrder: sortedInfo.columnKey === 'key' && sortedInfo.order,\n      }, {\n        title: 'Trader Name',\n        dataIndex: 'tname',\n        key: 'tname',\n        sorter: (a, b) => a.tname - b.tname,\n        sortOrder: sortedInfo.columnKey === 'tname' && sortedInfo.order,\n      }, {\n        title: 'Package Name',\n        dataIndex: 'package',\n        key: 'package',\n        filteredValue: filteredInfo.package || null,\n        onFilter: (value, record) => record.package.includes(value),\n        sorter: (a, b) => a.package.length - b.package.length,\n        sortOrder: sortedInfo.columnKey === 'package' && sortedInfo.order,\n      }, {\n        title: 'Invoice No',\n        dataIndex: 'invoice',\n        key: 'invoice',\n        sorter: (a, b) => a.invoice - b.invoice,\n        sortOrder: sortedInfo.columnKey === 'invoice' && sortedInfo.order,\n      }\n    ];\n\n    return(\n      <Card title=\"Billing\">\n        <Table className=\"gx-table-responsive\" columns={columns} dataSource={data} onChange={this.handleChange}/>\n      </Card>\n    )\n  }\n}\n\nexport default ResetFilter;\n\n\n// import * as firebase from \"firebase\";\n\n// data:[],\n// pdata:[],\n// tdata:[],\n// pkgName: \"\",\n// tdrName: \"\"\n\n\n// componentDidMount(){\n  //   let Ref = firebase.database().ref(\"invoices\");\n  //   Ref.on(\"value\", snapshot => {\n  //     const data = [];\n\n  //     snapshot.forEach(childSnapShot => {\n \n  //       const locker = {\n  //         key         : childSnapShot.key.toString(),\n  //         TraderId    : childSnapShot.val().TraderId,\n  //         PaymentId   : childSnapShot.val().paymentID,\n  //         PackageId   : childSnapShot.val().pid,\n  //         InvoiceId   : \"SIG1234\"\n  //       };\n  //       data.push(locker);\n\n        // let tkey = locker.TraderId;\n        // let ref = firebase.database().ref(\"users\").child(tkey);\n        //     ref.on(\"value\", snapshot => {\n        //       var tdatas = [];\n        //       snapshot.forEach(function(childSnapShot){\n        //         var tdr = childSnapShot.val();\n        //             tdatas.push(tdr);\n        //       })\n        //       // console.log(snapshot.val());\n        //       // let fn = snapshot.val().Name;\n        //       this.setState({tdata: tdatas})\n        //     })\n\n        // let pkey = locker.PackageId;\n        // let pref = firebase.database().ref(\"packages\").child(pkey);\n        //     pref.on(\"value\", snapshot => {\n        //       var pdatas = [];\n        //       snapshot.forEach(function(childSnapshot) {\n        //         var item = childSnapshot.val();\n        //         pdatas.push(item);\n        //       })\n        //       this.setState({pdata: pdatas})\n        //     })\n  //     });\n\n  //     this.setState(prevState => {\n  //       return { data: [...prevState.data, ...data] };\n  //     });\n  //   });\n  // }\n\n  {/* <p>{packages}</p> */}\n  {/* <p>{this.state.pdata.Name}</p> */}\n\n  // console.log(this.state.tdata);\n    // console.log(this.state.pdata);\n\n{/* <table>\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Trader Name</th>\n              <th>Package Name</th>\n              <th>Invoice Id</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          \n          <tbody>\n            <tr>\n              <td>1</td>\n              <td>Premium</td>\n              <td>{this.state.pkgName}</td>\n              <td>SIG1234</td>\n              <td>View</td>\n            </tr>\n          </tbody>\n        </table> */}\n\n        {/* <div className=\"table-operations\">\n          <Button onClick={this.setAgeSort}>Sort TraderId</Button>\n          <Button onClick={this.clearFilters}>Clear filters</Button>\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\n        </div> */}","import React from \"react\";\r\nimport {Col, Row} from \"antd\";\r\nimport ResetFilter from \"./ResetFilter\";\r\n\r\nconst DataTable = () => {\r\n  return (\r\n    <Row>\r\n      <Col span={24}>\r\n        <ResetFilter/>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n"],"sourceRoot":""}