{"version":3,"sources":["routes/components/packages/CreatePackage/PackageForm.js","routes/components/packages/CreatePackage/index.js"],"names":["FormItem","Form","Item","TextArea","Input","CreatePkg","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","_this","props","form","validateFieldsAndScroll","err","values","message","success","console","log","firebase","ref","push","Name","Description","Price","Duration","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","concat","getFieldDecorator","this","formItemLayout","labelCol","xs","span","sm","wrapperCol","react_default","a","createElement","card","className","title","es_form","onSubmit","Object","assign","label","rules","required","whitespace","input","rows","offset","es_button","type","htmlType","Component","CreatePakg","create","connect","auth","authUser","CreatePackage","row","col","PackageForm"],"mappings":"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","file":"static/js/146.8aa443e0.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Button, Card, Form, Input, message} from \"antd\";\r\nimport * as firebase from 'firebase';\r\nimport {connect} from 'react-redux';\r\n\r\nconst FormItem = Form.Item;\r\n// const Option = Select.Option;\r\nconst { TextArea } = Input;\r\n\r\nclass CreatePkg extends Component {\r\n    \r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: [],\r\n  };\r\n\r\n  \r\n  handleSubmit = (e) => {\r\n\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        message.success('Package Succesfully Created!');\r\n        console.log('Received values of form: ', values);    \r\n            firebase.database().ref(\"packages\").push({\r\n              \"Name\"        : values.Name,\r\n              \"Description\" : values.Description,\r\n              \"Price\"       : values.Price,\r\n              \"Duration\"    : values.Duration,\r\n            });   \r\n      }\r\n    });\r\n  }\r\n\r\n  handleConfirmBlur = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({confirmDirty: this.state.confirmDirty || !!value});\r\n  }\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], {force: true});\r\n    }\r\n    callback();\r\n  }\r\n  handleWebsiteChange = (value) => {\r\n    let autoCompleteResult;\r\n    if (!value) {\r\n      autoCompleteResult = [];\r\n    } else {\r\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    }\r\n    this.setState({autoCompleteResult});\r\n  }\r\n\r\n  render() {\r\n    const {getFieldDecorator} = this.props.form;\r\n    // const {autoCompleteResult} = this.state;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 8},\r\n      },\r\n      wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 16},\r\n      },\r\n    };\r\n\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Package Form\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormItem\r\n            {...formItemLayout}\r\n            label={(\r\n              <span>\r\n              Name                    \r\n            </span>\r\n            )}          >\r\n            {getFieldDecorator('Name', {\r\n              rules: [{required: true, message: 'Please enter your Firstname!', whitespace: true}],\r\n            })(\r\n              <Input/>\r\n            )}\r\n          </FormItem>\r\n\r\n          <FormItem\r\n            {...formItemLayout}\r\n            label={(\r\n              <span>\r\n              Description                    \r\n            </span>\r\n            )}          >\r\n            {getFieldDecorator('Description', {\r\n              rules: [{required: true, message: 'Please enter your Description!', whitespace: true}],\r\n            })(\r\n            <TextArea rows={4} />\r\n            )}\r\n          </FormItem>\r\n\r\n          <FormItem\r\n            {...formItemLayout}\r\n            label={(\r\n              <span>\r\n              Price                    \r\n            </span>\r\n            )}          >\r\n            {getFieldDecorator('Price', {\r\n              rules: [{required: true, message: 'Please enter your Price!', whitespace: true}],\r\n            })(\r\n              <Input/>\r\n            )}\r\n          </FormItem>\r\n\r\n          <FormItem\r\n            {...formItemLayout}\r\n            label={(\r\n              <span>\r\n              Duration                    \r\n            </span>\r\n            )}          >\r\n            {getFieldDecorator('Duration', {\r\n              rules: [{required: true, message: 'Please enter your Duration!', whitespace: true}],\r\n            })(\r\n              <Input/>\r\n            )}\r\n          </FormItem>\r\n\r\n          <FormItem {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">Create Package</Button>\r\n          </FormItem>\r\n        </Form>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst CreatePakg = Form.create()(CreatePkg);\r\nconst mapStateToProps = (state) => {\r\n    console.log(state.auth.authUser);    \r\n}\r\nexport default connect(mapStateToProps)(CreatePakg);\r\n","import React from \"react\";\r\nimport {Col, Row} from \"antd\";\r\nimport CreatePkg from './PackageForm';\r\n\r\n\r\nconst CreatePackage = () => {\r\n    return (\r\n      <Row>\r\n          {/* <h1>Welcome To Create Package Page</h1> */}\r\n        <Col span={24}>\r\n          <CreatePkg />\r\n        </Col>\r\n      \r\n      </Row>\r\n    );\r\n  };\r\n  \r\n  export default CreatePackage;"],"sourceRoot":""}